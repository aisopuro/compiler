import java.util.Deque;
import java.util.ArrayDeque;
import java.lang.Integer;

COMPILER Grammar

private Printer printer;

private class Context {
	public int currentType;
	public int expected;
	public CodeGenerator.ops previousOp;

	public Context(int current, int next, CodeGenerator.ops previousOp) {
		this.currentType = current;
		this.expected = next;
		this.previousOp = previousOp;
	}

	public void resetTo(int v, CodeGenerator.ops last) {
		this.currentType = v;
		this.expected = v;
		this.previousOp = last;
	}
}

private SymbolTable table = new SymbolTable();
private CodeGenerator generator = new CodeGenerator();
private Deque<Integer> stack = new ArrayDeque<Integer>();
private Deque<Context> contextStack = new ArrayDeque<Context>();



// Token types
private static final int UNDEFINED = 0;
private static final int INTEGER = UNDEFINED + 1;
private static final int BOOLEAN = INTEGER + 1;

// @SLX

private Context currentContext;

private String id;
private int expected = UNDEFINED; // Type of token expected next
private int lastType = UNDEFINED; // Type of token last processed
private int currentType = UNDEFINED; // Token type to be returned from current indentation
private boolean afterOperator = false; // 
private int previousOp;

private String out;

// Reset type context
private void resetContext() {
	this.currentType = UNDEFINED;
	this.expected = UNDEFINED;
	this.lastType = UNDEFINED;
}

private void updateContext(int newCurrent, int newExpected) {
	this.currentType = newCurrent;
	this.expected = newExpected;
	this.currentContext.currentType = newCurrent;
	this.currentContext.expected = newExpected;
}

private boolean isCurrentContextValid(int previousType, int expected) {
	if (!(this.currentType == this.expected || this.currentType == UNDEFINED)) {
		printer.print("Incorrect context");
		this.SemErr("unexpected operation type");
	}
	if (!(this.lastType == previousType)) {
		printer.print("Incompatible type");
		this.SemErr("unexpected type");
	}
	return ((this.currentType == expected || this.currentType == UNDEFINED) && this.lastType == previousType);
}

private boolean isCurrentContextValid(int expected) {
	return isCurrentContextValid(expected, expected);
}

private void enterParenthesis(int currentContextType) {
	this.stack.push(currentContextType);
	this.currentType = this.expected;
	this.expected = UNDEFINED;
	this.lastType = UNDEFINED;
	this.contextStack.push(this.currentContext);
	this.currentContext = new Context(this.currentType, this.expected, CodeGenerator.ops.NOP);
}

private void exitParenthesis() {
	this.lastType = this.currentType;
	this.currentType = this.stack.pop();
	this.expected = UNDEFINED;
	this.afterOperator = false;
	this.currentContext = this.contextStack.pop();
	if (this.currentContext.previousOp != CodeGenerator.ops.NOP) {
		// An operation is scheduled for the result of the parenthesis
		this.generator.commandOp(this.currentContext.previousOp);
	}
}

// Store new variable onto the heap
private boolean storeNewVariable(String name, int type) {
	boolean taken = this.table.exists(name);
	if (this.expected == UNDEFINED) {
		// Error, missing Type declaration
		this.SemErr("undeclared variable type");
	}
	else {
		if (taken) {
			// Error, variable already declared
			this.SemErr("a variable by that name already exists");	
		}
		else {
			// Ok, add variable
			int address = this.generator.allocate();
			this.table.add(name, type, address);
			// @SLX: DONE
		}
	}
	return !taken;
}

// Check if a type is within expected parameters
private boolean isExpected(int type) {
	boolean unexpected = (this.expected != type && this.expected != UNDEFINED);
	if (unexpected) {
		// Incompatible types
		printer.print("Error: incompatible types, got integer, expected: " + expected);
		this.SemErr("type mismatch");
	}
	return unexpected;
}

private void checkInteger(String value) {
	int val = Integer.MAX_VALUE;
	try {
		val = Integer.valueOf(value);
	}
	catch (NumberFormatException e) {
		// Number is too large
		this.SemErr("overflow: integer is too large");
	}
	
	this.lastType = INTEGER;
	this.isExpected(INTEGER);
	this.generator.push(val);
}

public Parser(Scanner s, Printer p) {
       this(s);
       this.printer = p;
}

CHARACTERS
	letter = 'A'..'Z' + 'a'..'z'.
	digit = '0'..'9'.

TOKENS
	identifier = letter {letter | digit}.
	integer = digit {digit}.

IGNORE '\r'+'\t'+'\n'

PRODUCTIONS

Grammar			(. 
					stack.push(UNDEFINED); // Set dummy value for stack bottom
					this.currentContext = new Context(0, 0, CodeGenerator.ops.NOP);
					printer.startProduction("Grammar"); 
				.)
=
MainFuncDecl
EOF				(. 
					printer.print("Table: " + table.toString());
					this.generator.halt();
					printer.endProduction("Grammar");
				.)
.

MainFuncDecl	(. printer.startProduction("MainFuncDecl"); .)
=
"main"			(. 	
				.)
FuncBody		(. printer.endProduction("MainFuncDecl"); .)
.

FuncBody		(. printer.startProduction("FuncBody"); .)
=
"{"				(.  .)
VarDecl
StatementList
ReturnStatement	
"}"				(. 
					
					printer.endProduction("FuncBody");
				.)
.

VarDecl			(. printer.startProduction("VarDecl"); .)
=
Type
identifier		(.
					printer.print("id: " + t.val);
					this.storeNewVariable(t.val, this.currentContext.expected);
				.)
";"				(.
					this.resetContext();
				.)
VarDecl			(. printer.endProduction("VarDecl"); .)
|
				(. 
					printer.print("_");
					printer.endProduction("VarDecl"); 
				.)
.

StatementList	(. printer.startProduction("StatementList"); .)
=
Statement
StatementList	(. printer.endProduction("StatementList"); .)
|
				(. printer.endProduction("StatementList"); .)
.

ReturnStatement	(. printer.startProduction("ReturnStatement"); .)
=
"return"		(. printer.print("return"); .)
Expr
";"				(. printer.endProduction("ReturnStatement"); .)
.

Statement		(. printer.startProduction("Statement"); .)
=
"if" 			(. 
					this.generator.startIf();
				 .)
"(" 			(.
					this.enterParenthesis(BOOLEAN);
				.)
Expr 
")"				(. 
					if (this.currentType != BOOLEAN) {
						// ERROR, non-boolean expression in conditional
						printer.print("Error in if-statement: " + this.currentType);
						this.SemErr("incorrect if-declaration");
					}
					else {
						printer.print("if ok");
					}
					this.exitParenthesis();
					this.resetContext();
				 .)
"then"			(.
					this.generator.startThen();
					printer.print("then");
				.)
Statement
"else"			(.
					this.generator.startElse();
					printer.print("else");
				// @SLX: log current line of SLX program and make a conditional jump to here
				.)
Statement
"fi"			(.	
					this.generator.startFi();
					printer.print("fi");
					expected = UNDEFINED;
					printer.endProduction("Statement"); 
				.)
|
"while"			(. 
					printer.print("while");
					stack.push(BOOLEAN);
					this.generator.startWhile();
				 .)
"("				(. this.enterParenthesis(BOOLEAN);.)
Expr
")"				(.
					if (stack.peek() != BOOLEAN) {
						// ERROR, non-boolean expression
						this.SemErr("incorrect while-declaration");
					}
					else {

						printer.print("while ok");
					}
					this.generator.endWhileConditional();
					this.exitParenthesis();
					this.resetContext();
				.)
Statement		(.printer.endProduction("Statement");
					this.generator.endWhileBody();
				.)
|
"print"			(.printer.print("print");.)
"("				
Expr
")"				(.
				// @SLX: Print
					this.generator.commandPrint();
				.)
";"				(. 
					printer.endProduction("Statement"); 
				.)	
|
"{"				
StatementList	
"}"				(. 
					printer.endProduction("Statement"); 
				.)
|
IdAccess
":="			(.
					this.currentContext.previousOp = CodeGenerator.ops.ASG;
					this.enterParenthesis(this.currentType);
				.)
Expr			(.
					if (this.lastType == this.expected) {
						this.generator.commandAssignment();
					}
				.)
";"				(. 
					this.exitParenthesis();

					this.resetContext();
					printer.endProduction("Statement"); 
				.)
.




Expr			(. printer.startProduction("Expr"); 
					.)
=
BaseExpr
(
op
BaseExpr		(. 
					this.generator.commandOp(this.currentContext.previousOp);
					printer.endProduction("Expr");.)
|
				(. printer.endProduction("Expr");.)
)				
|
"!"				(. printer.print("!"); 
				this.expected = BOOLEAN;
				// @SLX: Negation here
				.)
BaseExpr		(.
					if (this.lastType != BOOLEAN) {
						// Error, negating non-boolean
						this.SemErr("trying to negate non-boolean");
					}
					else {
						this.generator.commandNegation();
					}
				.)
.




BaseExpr		(. 
					printer.startProduction("BaseExpr");.)
=
"("				(.
					printer.print(stack.size() + ": In with: " + currentType);
					this.enterParenthesis(this.currentType);
				 .)
Expr			
")"				(. 
					this.exitParenthesis();
					printer.print(stack.size() + ": Out with: " + lastType);
					printer.endProduction("BaseExpr"); .)
|
IdAccess		(.printer.endProduction("BaseExpr");.)
|
integer			(. 	
					printer.print(t.val);
					this.checkInteger(t.val);
					printer.endProduction("BaseExpr");
				 .)
|
"true"			(. 	
					printer.print(t.val);
					this.lastType = BOOLEAN;
					this.isExpected(BOOLEAN);
					this.generator.push(1);
					printer.endProduction("BaseExpr"); 
				.)
|
"false"			(. 	
					printer.print(t.val);
					this.lastType = BOOLEAN;
					this.isExpected(BOOLEAN);
					this.generator.push(0);
					printer.endProduction("BaseExpr"); 
				.)
|
"read()"		(. 
					// @TODO: Check read() input?
					// @SLX: user input 
					this.lastType = INTEGER;
					this.isExpected(INTEGER);
					this.generator.commandRead();
				.)
.

IdAccess		(. printer.startProduction("IdAccess"); .) // Try to access a variable
=
identifier		(. 
					if (this.table.exists(t.val)) {
						// id is in table, fetch it to the stack
						this.generator.commandLoad(this.table.addressOf(t.val));
						printer.print("id found: " + t.val);
						if (this.la.val.equals(":=")) {
							// Assignment coming up
							this.currentType = this.table.typeOf(t.val);
						}
						this.lastType = this.table.typeOf(t.val);
					}
					else {
						printer.print("id not found: " + t.val);
						this.SemErr("no variable named " + t.val);
					}
					

					printer.endProduction("IdAccess"); .)
.


Type			(. 
					printer.startProduction("Type"); 
				.)
=
"int"			(.	
					printer.print("Type: " + t.val);
					printer.print("Next: " + la.val);
					this.expected = INTEGER;
					this.currentContext.expected = INTEGER;
					printer.endProduction("Type");
				.)
|
"boolean"		(.
					printer.print("Type: " + t.val);
					this.expected = BOOLEAN;
					this.currentContext.expected = BOOLEAN;
					printer.endProduction("Type");
				.)
.

op				(. printer.startProduction("op");
					printer.print(la.val); .)
=
"+"				(. 
					if (!isCurrentContextValid(INTEGER)) {	
					}
					this.updateContext(INTEGER, INTEGER);
					this.currentContext.previousOp = CodeGenerator.ops.ADD;
					printer.endProduction("op"); 
				.)
|
"-"				(. 
					if (!isCurrentContextValid(INTEGER)) {
						// @SLX: SUB
					}
					this.updateContext(INTEGER, INTEGER);
					this.currentContext.previousOp = CodeGenerator.ops.SUB;
					printer.endProduction("op"); 
				.)
|
"*"				(. 
					if (!isCurrentContextValid(INTEGER)) {
						// @SLX: MUL
					}
					this.updateContext(INTEGER, INTEGER);
					this.currentContext.previousOp = CodeGenerator.ops.MUL;
					printer.endProduction("op"); 
				.)
|
"/"				(. 
					if (!isCurrentContextValid(INTEGER)) {
						// @SLX: DIV
					}
					this.updateContext(INTEGER, INTEGER);
					this.currentContext.previousOp = CodeGenerator.ops.DIV;
					printer.endProduction("op"); 
				.)
|
"<"				(. 
					if (!isCurrentContextValid(INTEGER, BOOLEAN)) {
						// @SLX: LESS_THAN
					}
					this.updateContext(BOOLEAN, INTEGER);
					this.currentContext.previousOp = CodeGenerator.ops.LSS;
					printer.endProduction("op"); 
				.)
|
"&&"			(. 
					if (!isCurrentContextValid(BOOLEAN)) {
						// @SLX: AND
					}
					this.updateContext(BOOLEAN, BOOLEAN);
					this.currentContext.previousOp = CodeGenerator.ops.AND;
					printer.endProduction("op"); 
				.)
.

END Grammar.